Index: data-structure/src/main/java/com/vista/leetcode/list/string/E_709_转换成小写字母.java
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/list/string/E_709_转换成小写字母.java	(revision e4a32925f3790af07c5477ecc73ec7665cc03199)
+++ data-structure/src/main/java/com/vista/leetcode/string/E_709_转换成小写字母.java	(date 1586055761453)
@@ -1,4 +1,4 @@
-package com.vista.leetcode.list.string;
+package com.vista.leetcode.string;
 
 /**
  * https://leetcode-cn.com/problems/to-lower-case/
Index: data-structure/src/main/java/com/vista/leetcode/list/string/E_541_反转字符串II.java
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/list/string/E_541_反转字符串II.java	(revision e4a32925f3790af07c5477ecc73ec7665cc03199)
+++ data-structure/src/main/java/com/vista/leetcode/string/E_541_反转字符串II.java	(date 1586055761463)
@@ -1,4 +1,4 @@
-package com.vista.leetcode.list.string;
+package com.vista.leetcode.string;
 
 /**
  * https://leetcode-cn.com/problems/reverse-string-ii/
Index: data-structure/src/main/java/com/vista/leetcode/list/string/E_1221_分割平衡字符串.java
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/list/string/E_1221_分割平衡字符串.java	(revision e4a32925f3790af07c5477ecc73ec7665cc03199)
+++ data-structure/src/main/java/com/vista/leetcode/string/E_1221_分割平衡字符串.java	(date 1586055761473)
@@ -1,4 +1,4 @@
-package com.vista.leetcode.list.string;
+package com.vista.leetcode.string;
 
 /**
  * https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/
Index: data-structure/src/main/java/com/vista/leetcode/list/string/E_1108_IP地址无效化.java
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/list/string/E_1108_IP地址无效化.java	(revision e4a32925f3790af07c5477ecc73ec7665cc03199)
+++ data-structure/src/main/java/com/vista/leetcode/string/E_1108_IP地址无效化.java	(date 1586055761470)
@@ -1,4 +1,4 @@
-package com.vista.leetcode.list.string;
+package com.vista.leetcode.string;
 
 /**
  * https://leetcode-cn.com/problems/defanging-an-ip-address/
Index: data-structure/src/main/java/com/vista/leetcode/list/string/E_804_唯一摩尔斯密码词.java
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/list/string/E_804_唯一摩尔斯密码词.java	(revision e4a32925f3790af07c5477ecc73ec7665cc03199)
+++ data-structure/src/main/java/com/vista/leetcode/string/E_804_唯一摩尔斯密码词.java	(date 1586055761478)
@@ -1,4 +1,4 @@
-package com.vista.leetcode.list.string;
+package com.vista.leetcode.string;
 
 import java.util.HashSet;
 
Index: data-structure/src/main/java/com/vista/leetcode/list/string/E_1370_上升下降字符串.java
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/list/string/E_1370_上升下降字符串.java	(revision e4a32925f3790af07c5477ecc73ec7665cc03199)
+++ data-structure/src/main/java/com/vista/leetcode/string/E_1370_上升下降字符串.java	(date 1586055761460)
@@ -1,4 +1,4 @@
-package com.vista.leetcode.list.string;
+package com.vista.leetcode.string;
 
 /**
  * @author WenTingTing by 2020/4/1
Index: data-structure/src/main/java/com/vista/leetcode/list/string/E_557_反转字符串中的单词III.java
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/list/string/E_557_反转字符串中的单词III.java	(revision e4a32925f3790af07c5477ecc73ec7665cc03199)
+++ data-structure/src/main/java/com/vista/leetcode/string/E_557_反转字符串中的单词III.java	(date 1586055761466)
@@ -1,4 +1,4 @@
-package com.vista.leetcode.list.string;
+package com.vista.leetcode.string;
 
 
 import com.vista.drill.stack.Stack;
Index: data-structure/src/main/java/com/vista/leetcode/list/string/E_657_机器人能否返回原点.java
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/list/string/E_657_机器人能否返回原点.java	(revision e4a32925f3790af07c5477ecc73ec7665cc03199)
+++ data-structure/src/main/java/com/vista/leetcode/string/E_657_机器人能否返回原点.java	(date 1586055761457)
@@ -1,4 +1,4 @@
-package com.vista.leetcode.list.string;
+package com.vista.leetcode.string;
 
 /**
  * https://leetcode-cn.com/problems/robot-return-to-origin/
Index: design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton07.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton07.java	(date 1586095542887)
+++ design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton07.java	(date 1586095542887)
@@ -0,0 +1,11 @@
+package com.vista.design.drill.singleton;
+
+/**
+ * 枚举类
+ * 推荐使用
+ *
+ * @author Wen TingTing by 2020/4/5
+ */
+enum Singleton07 {
+    INSTANCE;
+}
Index: design-pattern/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- design-pattern/pom.xml	(date 1586085988931)
+++ design-pattern/pom.xml	(date 1586085988931)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>vista-drill</artifactId>
+        <groupId>com.vista.drill</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>design-mode</artifactId>
+
+
+</project>
\ No newline at end of file
Index: data-structure/src/main/java/com/vista/leetcode/list/string/E_344_反转字符串.java
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/list/string/E_344_反转字符串.java	(revision e4a32925f3790af07c5477ecc73ec7665cc03199)
+++ data-structure/src/main/java/com/vista/leetcode/string/E_344_反转字符串.java	(date 1586055761475)
@@ -1,4 +1,4 @@
-package com.vista.leetcode.list.string;
+package com.vista.leetcode.string;
 
 /**
  * https://leetcode-cn.com/problems/reverse-string/
Index: data-structure/src/main/java/com/vista/leetcode/string/M_5_最长回文子串.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/string/M_5_最长回文子串.java	(date 1586071073203)
+++ data-structure/src/main/java/com/vista/leetcode/string/M_5_最长回文子串.java	(date 1586071073203)
@@ -0,0 +1,42 @@
+package com.vista.leetcode.string;
+
+/**
+ * @author Wen TingTing by 2020/4/5
+ */
+public class M_5_最长回文子串 {
+    /**
+     * 暴力解法
+     *
+     * @param s
+     * @return
+     */
+    public static String longestPalindrome(String s) {
+        String res = "";
+        int len = s.length();
+        int num = 0;
+        for (int i = 0; i < len ; i++) {
+            for (int j = i; j <= len; j++) {
+                String sub = s.substring(i, j);
+                if (reverse(sub) && sub.length() > num) {
+                    res = sub;
+                    num = Math.max(num, sub.length());
+                }
+            }
+        }
+        return res;
+    }
+
+    public static Boolean reverse(String s) {
+        int len = s.length();
+        for (int i = 0; i < len / 2; i++) {
+            if (s.charAt(i) != s.charAt(len - 1 - i)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    public static void main(String[] args) {
+        longestPalindrome("a");
+    }
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision e4a32925f3790af07c5477ecc73ec7665cc03199)
+++ pom.xml	(date 1586093475891)
@@ -27,6 +27,7 @@
     <modules>
         <module>data-structure</module>
         <module>java-base</module>
+        <module>design-pattern</module>
     </modules>
     <dependencies>
         <dependency>
Index: design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton05.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton05.java	(date 1586095542875)
+++ design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton05.java	(date 1586095542875)
@@ -0,0 +1,28 @@
+package com.vista.design.drill.singleton;
+
+/**
+ * 懒汉式-双重检查
+ * 线程安全
+ * 在保证线程安全的前提下，提高效率
+ * <p>
+ * 推荐使用
+ *
+ * @author Wen TingTing by 2020/4/5
+ */
+public class Singleton05 {
+    private static Singleton05 instance;
+
+    private Singleton05() {
+    }
+
+    public Singleton05 getInstance() {
+        if (instance == null) {
+            synchronized (Singleton05.class) {
+                if (instance == null)
+                    instance = new Singleton05();
+
+            }
+        }
+        return instance;
+    }
+}
\ No newline at end of file
Index: data-structure/src/main/java/com/vista/leetcode/string/M_3_无重复字符的最长子串.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- data-structure/src/main/java/com/vista/leetcode/string/M_3_无重复字符的最长子串.java	(date 1586068988336)
+++ data-structure/src/main/java/com/vista/leetcode/string/M_3_无重复字符的最长子串.java	(date 1586068988336)
@@ -0,0 +1,66 @@
+package com.vista.leetcode.string;
+
+import java.util.HashMap;
+import java.util.HashSet;
+
+/**
+ * @author Wen TingTing by 2020/4/5
+ */
+public class M_3_无重复字符的最长子串 {
+    /**
+     * 暴力解法
+     * 依次循环str所有子串，如果字符不重复便将其存储在hashSet中
+     *
+     * @param s
+     * @return
+     */
+    public static int lengthOfLongestSubstring1(String s) {
+        int num = 0;
+        HashSet<Character> characters = new HashSet<Character>();
+        for (int i = 0; i < s.length(); i++) {
+            characters.clear();
+            for (int j = i; j < s.length(); j++) {
+                if (characters.contains(s.charAt(j))) {
+                    break;
+                }
+                characters.add(s.charAt(j));
+            }
+            num = Math.max(num, characters.size());
+        }
+        return num;
+    }
+
+    /**
+     * 滑动窗口
+     * 设立头指针flag=0
+     * 1.依次循环str字符，并将字符及其索引存储在hashMap中
+     * 2.如果字符重复，则将flag重置为：字符索引+1
+     * 3.将字符加入map中，无重复字符的有效长度即为 i-flag+1
+     *
+     * @param s
+     * @return
+     */
+    public static int lengthOfLongestSubstring2(String s) {
+        int num = 0;
+        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
+        int flag = 0;
+        for (int i = 0; i < s.length(); i++) {
+            char c = s.charAt(i);
+            if (map.containsKey(c)) {
+                flag = Math.max(flag, map.get(c) + 1);
+            }
+            map.put(c, i);
+            num = Math.max(num, i - flag + 1);
+        }
+        return num;
+    }
+
+
+    public static void main(String[] args) {
+        //  System.out.println(lengthOfLongestSubstring("abcabcbb"));
+        System.out.println(lengthOfLongestSubstring2("pwwkew"));
+        // System.out.println(lengthOfLongestSubstring2(" "));
+
+    }
+
+}
Index: design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton06.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton06.java	(date 1586095172854)
+++ design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton06.java	(date 1586095172854)
@@ -0,0 +1,20 @@
+package com.vista.design.drill.singleton;
+
+/**
+ * 静态内部类
+ * 推荐使用
+ *
+ * @author Wen TingTing by 2020/4/5
+ */
+public class Singleton06 {
+    private static class Singleton06Instance {
+        private static Singleton06 instance = new Singleton06();
+    }
+
+    private Singleton06() {
+    }
+
+    public Singleton06 getInstance() {
+        return Singleton06Instance.instance;
+    }
+}
Index: design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton01.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton01.java	(date 1586095542859)
+++ design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton01.java	(date 1586095542859)
@@ -0,0 +1,18 @@
+package com.vista.design.drill.singleton;
+
+/**
+ * 饿汉式-静态变量
+ * 缺点：当未调用getInstance时，可能造成内存浪费
+ *
+ * @author Wen TingTing by 2020/4/5
+ */
+public class Singleton01 {
+    private final static Singleton01 instance = new Singleton01();
+
+    private Singleton01() {
+    }
+
+    public Singleton01 getInstance() {
+        return instance;
+    }
+}
Index: design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton02.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton02.java	(date 1586095542882)
+++ design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton02.java	(date 1586095542882)
@@ -0,0 +1,22 @@
+package com.vista.design.drill.singleton;
+
+/**
+ * 饿汉式-静态代码块
+ * 与饿汉式-方式1没有太多区别
+ *
+ * @author Wen TingTing by 2020/4/5
+ */
+public class Singleton02 {
+    private static Singleton02 instance;
+
+    static {
+        instance = new Singleton02();
+    }
+
+    private Singleton02() {
+    }
+
+    public Singleton02 getInstance() {
+        return instance;
+    }
+}
Index: design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton04.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton04.java	(date 1586095542885)
+++ design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton04.java	(date 1586095542885)
@@ -0,0 +1,22 @@
+package com.vista.design.drill.singleton;
+
+/**
+ * 懒汉式-同步方法
+ * 线程安全
+ * 缺点：效率比较低
+ *
+ * @author Wen TingTing by 2020/4/5
+ */
+public class Singleton04 {
+    private static Singleton04 instance;
+
+    private Singleton04() {
+    }
+
+    public synchronized Singleton04 getInstance() {
+        if (instance == null) {
+            instance = new Singleton04();
+        }
+        return instance;
+    }
+}
\ No newline at end of file
Index: design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton03.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton03.java	(date 1586095542879)
+++ design-pattern/src/main/java/com/vista/design/drill/singleton/Singleton03.java	(date 1586095542879)
@@ -0,0 +1,20 @@
+package com.vista.design.drill.singleton;
+
+/**
+ * 懒汉式-线程不安全
+ *
+ * @author Wen TingTing by 2020/4/5
+ */
+public class Singleton03 {
+    private static Singleton03 instance;
+
+    private Singleton03() {
+    }
+
+    public Singleton03 getInstance() {
+        if (instance == null) {
+            instance = new Singleton03();
+        }
+        return instance;
+    }
+}
